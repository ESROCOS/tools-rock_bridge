#!/usr/bin/env python3

import os
import sys
from subprocess import call

from rockBridgeModule import bridgeModule

           
if __name__ == "__main__":	
	
	if len(sys.argv) != 3:
		print("Error running the script. python3 script.py absolute/path/taste_proyect nameFunction")
		sys.exit(0)
	
	taste_path = sys.argv[1]
	func_name = sys.argv[2]
	iv_path = sys.argv[1]+"/binary.c/iv.py"
	
	
	print("taste_path:" + taste_path)
	print("func_name:" + func_name)
	print("iv_path:" + iv_path)
	help(bridgeModule)
	
	# Load config data from iv.py
	if not os.path.isfile(iv_path):
		print('Error: ' + iv_path + 'file doesn\'t exist')
		sys.exit(0)
		
	if not os.path.isdir(taste_path + '/' + func_name):
		print('Error: ' + taste_path + func_name + ' function not found.')
		sys.exit(0)
			

	#create orogen proyect
	call(["rock-create-orogen", func_name])
	
	
	#generar orogen 
	bridgeModule.generate_orogen(func_name, iv_path)
	
	
	call(["cp", "output/"+func_name+".orogen", func_name+"/"+func_name+".orogen"])
	
	
	#ejecutar orogen (crea esqueletos)
	os.system("cd " + func_name + "; rock-create-orogen; amake")
	"""		
	#generate task/CMakeLists.txt
	with open(str(func_name) + "/tasks/CMakeLists.txt", 'a') as file:
		file.write('\nTARGET_LINK_LIBRARIES(${' + func_name.upper() + '_TASKLIB_NAME} -L$ENV{AUTOPROJ_CURRENT_ROOT}/install/lib -lbase_support -lx86_partition)\n')
		file.writelines('TARGET_INCLUDE_DIRECTORIES(${' + func_name.upper() + '_TASKLIB_NAME} PUBLIC $ENV{AUTOPROJ_CURRENT_ROOT}/install/include ' + taste_path + '/' + func_name+')\n')

	#sobreescribir ficheros task
	bridgeModule.generate_task_output(func_name, iv_path)
	call(["cp", "output/tasks/"+func_name+"_task.cpp", func_name + "/tasks/"+func_name+"_task.cpp"])
	call(["cp", "output/tasks/"+func_name+"_task.hpp", func_name + "/tasks/"+func_name+"_task.hpp"])
	os.system("cd ./" + func_name + "; amake")
	
	#taste files
	bridgeModule.generate_task_taste(func_name, iv_path)
	call(["cp", taste_path+"/"+func_name+"/"+func_name+".cc", taste_path+"/"+func_name+"/"+func_name+".cc.old"])
	call(["cp", "output/"+func_name+".cc", taste_path+"/"+func_name+"/"+func_name+".cc"])
	
	#taste pre-init
	pre_init = taste_path + "/" + func_name + "/user_init_pre.sh"
	if os.path.isfile(pre_init):
		with open(pre_init, 'a') as file:
			file.write('\nORCHESTRATOR_OPTIONS+=\" -e x86_partition:' + taste_path + "/" + func_name + "/" + '\" \n')
			file.write('ORCHESTRATOR_OPTIONS+=\" -e x86_partition:' + os.environ['AUTOPROJ_CURRENT_ROOT'] +'/install/include/\" \n')	
			file.write('ORCHESTRATOR_OPTIONS+=\" -e x86_partition:' + os.environ['AUTOPROJ_CURRENT_ROOT'] +'/install/include/orocos/\" \n')
			file.write('ORCHESTRATOR_OPTIONS+=\" -l x86_partition:' + os.environ['AUTOPROJ_CURRENT_ROOT'] +'/install/lib/orocos/lib' + func_name + '-tasks-gnulinux.so\" \n')
	else:
		with open(pre_init, 'x') as file:
			file.write('#!/bin/sh\n\n')
			file.write('\nORCHESTRATOR_OPTIONS+=\" -e x86_partition:' + taste_path + "/" + func_name + "/" + '\" \n')
			file.write('ORCHESTRATOR_OPTIONS+=\" -e x86_partition:' + os.environ['AUTOPROJ_CURRENT_ROOT'] +'/install/include/\" \n')	
			file.write('ORCHESTRATOR_OPTIONS+=\" -e x86_partition:' + os.environ['AUTOPROJ_CURRENT_ROOT'] +'/install/include/orocos/\" \n')
			file.write('ORCHESTRATOR_OPTIONS+=\" -l x86_partition:' + os.environ['AUTOPROJ_CURRENT_ROOT'] +'/install/lib/orocos/lib' + func_name + '-tasks-gnulinux.so\" \n')


	#generate .so and copy to install
	"""
	
	sys.exit(0)

