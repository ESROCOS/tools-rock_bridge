# Task files could be using headers in tasks/ so add the relevant directory in
# our include path
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/.orogen/camera_simulator)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/.orogen)

orogen_pkg_check_modules(CAMERA_IDS REQUIRED camera_ids)
include_directories(${CAMERA_IDS_INCLUDE_DIRS})
add_definitions(${CAMERA_IDS_CFLAGS_OTHER})
orogen_pkg_check_modules(LOGGER_TASKS_GNULINUX REQUIRED logger-tasks-gnulinux)
include_directories(${LOGGER_TASKS_GNULINUX_INCLUDE_DIRS})
add_definitions(${LOGGER_TASKS_GNULINUX_CFLAGS_OTHER})
orogen_pkg_check_modules(OrocosCORBA REQUIRED orocos-rtt-corba-gnulinux)
orogen_pkg_check_modules(OrocosRTT REQUIRED orocos-rtt-gnulinux)
include_directories(${OrocosRTT_INCLUDE_DIRS})
add_definitions(${OrocosRTT_CFLAGS_OTHER})
link_directories(${OrocosRTT_LIBRARY_DIRS})
orogen_pkg_check_modules(RTT_TYPELIB REQUIRED rtt_typelib-gnulinux)
include_directories(${RTT_TYPELIB_INCLUDE_DIRS})
add_definitions(${RTT_TYPELIB_CFLAGS_OTHER})
link_directories(${RTT_TYPELIB_LIBRARY_DIRS})
orogen_pkg_check_modules(base_TRANSPORT_CORBA REQUIRED base-transport-corba-gnulinux)
include_directories(${base_TRANSPORT_CORBA_INCLUDE_DIRS})
add_definitions(${base_TRANSPORT_CORBA_CFLAGS_OTHER})
link_directories(${base_TRANSPORT_CORBA_LIBRARY_DIRS})
orogen_pkg_check_modules(base_TRANSPORT_MQUEUE REQUIRED base-transport-mqueue-gnulinux)
include_directories(${base_TRANSPORT_MQUEUE_INCLUDE_DIRS})
add_definitions(${base_TRANSPORT_MQUEUE_CFLAGS_OTHER})
link_directories(${base_TRANSPORT_MQUEUE_LIBRARY_DIRS})
orogen_pkg_check_modules(base_TRANSPORT_TYPELIB REQUIRED base-transport-typelib-gnulinux)
include_directories(${base_TRANSPORT_TYPELIB_INCLUDE_DIRS})
add_definitions(${base_TRANSPORT_TYPELIB_CFLAGS_OTHER})
link_directories(${base_TRANSPORT_TYPELIB_LIBRARY_DIRS})
orogen_pkg_check_modules(base_TYPEKIT REQUIRED base-typekit-gnulinux)
include_directories(${base_TYPEKIT_INCLUDE_DIRS})
add_definitions(${base_TYPEKIT_CFLAGS_OTHER})
link_directories(${base_TYPEKIT_LIBRARY_DIRS})
orogen_pkg_check_modules(base_TYPEKIT REQUIRED base-typekit-gnulinux)
include_directories(${base_TYPEKIT_INCLUDE_DIRS})
add_definitions(${base_TYPEKIT_CFLAGS_OTHER})
orogen_pkg_check_modules(camera_ids REQUIRED camera_ids)
include_directories(${camera_ids_INCLUDE_DIRS})
add_definitions(${camera_ids_CFLAGS_OTHER})
link_directories(${camera_ids_LIBRARY_DIRS})
orogen_pkg_check_modules(camera_ids REQUIRED camera_ids)
include_directories(${camera_ids_INCLUDE_DIRS})
add_definitions(${camera_ids_CFLAGS_OTHER})
orogen_pkg_check_modules(logger_TASKLIB REQUIRED logger-tasks-gnulinux)
include_directories(${logger_TASKLIB_INCLUDE_DIRS})
add_definitions(${logger_TASKLIB_CFLAGS_OTHER})
link_directories(${logger_TASKLIB_LIBRARY_DIRS})
orogen_pkg_check_modules(logger_TRANSPORT_CORBA REQUIRED logger-transport-corba-gnulinux)
include_directories(${logger_TRANSPORT_CORBA_INCLUDE_DIRS})
add_definitions(${logger_TRANSPORT_CORBA_CFLAGS_OTHER})
link_directories(${logger_TRANSPORT_CORBA_LIBRARY_DIRS})
orogen_pkg_check_modules(logger_TRANSPORT_MQUEUE REQUIRED logger-transport-mqueue-gnulinux)
include_directories(${logger_TRANSPORT_MQUEUE_INCLUDE_DIRS})
add_definitions(${logger_TRANSPORT_MQUEUE_CFLAGS_OTHER})
link_directories(${logger_TRANSPORT_MQUEUE_LIBRARY_DIRS})
orogen_pkg_check_modules(logger_TRANSPORT_TYPELIB REQUIRED logger-transport-typelib-gnulinux)
include_directories(${logger_TRANSPORT_TYPELIB_INCLUDE_DIRS})
add_definitions(${logger_TRANSPORT_TYPELIB_CFLAGS_OTHER})
link_directories(${logger_TRANSPORT_TYPELIB_LIBRARY_DIRS})
orogen_pkg_check_modules(logger_TYPEKIT REQUIRED logger-typekit-gnulinux)
include_directories(${logger_TYPEKIT_INCLUDE_DIRS})
add_definitions(${logger_TYPEKIT_CFLAGS_OTHER})
link_directories(${logger_TYPEKIT_LIBRARY_DIRS})
orogen_pkg_check_modules(std_TRANSPORT_CORBA REQUIRED std-transport-corba-gnulinux)
include_directories(${std_TRANSPORT_CORBA_INCLUDE_DIRS})
add_definitions(${std_TRANSPORT_CORBA_CFLAGS_OTHER})
link_directories(${std_TRANSPORT_CORBA_LIBRARY_DIRS})
orogen_pkg_check_modules(std_TRANSPORT_MQUEUE REQUIRED std-transport-mqueue-gnulinux)
include_directories(${std_TRANSPORT_MQUEUE_INCLUDE_DIRS})
add_definitions(${std_TRANSPORT_MQUEUE_CFLAGS_OTHER})
link_directories(${std_TRANSPORT_MQUEUE_LIBRARY_DIRS})
orogen_pkg_check_modules(std_TRANSPORT_TYPELIB REQUIRED std-transport-typelib-gnulinux)
include_directories(${std_TRANSPORT_TYPELIB_INCLUDE_DIRS})
add_definitions(${std_TRANSPORT_TYPELIB_CFLAGS_OTHER})
link_directories(${std_TRANSPORT_TYPELIB_LIBRARY_DIRS})
orogen_pkg_check_modules(std_TYPEKIT REQUIRED std-typekit-gnulinux)
include_directories(${std_TYPEKIT_INCLUDE_DIRS})
add_definitions(${std_TYPEKIT_CFLAGS_OTHER})
link_directories(${std_TYPEKIT_LIBRARY_DIRS})
orogen_pkg_check_modules(std_TYPEKIT REQUIRED std-typekit-gnulinux)
include_directories(${std_TYPEKIT_INCLUDE_DIRS})
add_definitions(${std_TYPEKIT_CFLAGS_OTHER})

# Link directories need to be set before(!) providing the target
orogen_pkg_check_modules(service_discovery service_discovery)
if(service_discovery_FOUND)
    add_definitions(-DOROGEN_SERVICE_DISCOVERY_ACTIVATED)
    message(STATUS "ServiceDiscovery library found: activating service discovery functionality for tasks")
    include_directories(${service_discovery_INCLUDE_DIRS})
    add_definitions(${service_discovery_CFLAGS_OTHER})
    link_directories(${service_discovery_LIBRARY_DIRS})
endif()

find_package(Boost REQUIRED COMPONENTS system program_options)
include_directories(${Boost_INCLUDE_DIRS})
link_directories(${Boost_LIBRARY_DIRS})

add_definitions(-DRTT_COMPONENT)
add_executable(orogen_default_camera_simulator__CameraDriver ${CMAKE_CURRENT_SOURCE_DIR}/.orogen/main-orogen_default_camera_simulator__CameraDriver.cpp)
target_link_libraries(orogen_default_camera_simulator__CameraDriver camera_simulator-typekit-${OROCOS_TARGET})
target_link_libraries(orogen_default_camera_simulator__CameraDriver camera_simulator-transport-corba-${OROCOS_TARGET})
target_link_libraries(orogen_default_camera_simulator__CameraDriver camera_simulator-transport-mqueue-${OROCOS_TARGET})
target_link_libraries(orogen_default_camera_simulator__CameraDriver camera_simulator-transport-typelib-${OROCOS_TARGET})

if(service_discovery_FOUND)
    target_link_libraries(orogen_default_camera_simulator__CameraDriver ${service_discovery_LIBRARIES})
endif()

target_link_libraries(orogen_default_camera_simulator__CameraDriver ${Boost_PROGRAM_OPTIONS_LIBRARIES} ${Boost_SYSTEM_LIBRARIES})



list(APPEND CMAKE_PREFIX_PATH ${OrocosRTT_PREFIX})
find_package(RTTPlugin COMPONENTS rtt-typekit rtt-transport-corba rtt-transport-mqueue)
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${RTT_PLUGIN_rtt-typekit_LIBRARY})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${RTT_PLUGIN_rtt-transport-corba_LIBRARY})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${RTT_PLUGIN_rtt-transport-mqueue_LIBRARY})
target_link_libraries(orogen_default_camera_simulator__CameraDriver camera_simulator-tasks-${OROCOS_TARGET})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${OrocosRTT_LIBRARIES})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${RTT_TYPELIB_LIBRARIES})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${base_TRANSPORT_CORBA_LIBRARIES})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${base_TRANSPORT_MQUEUE_LIBRARIES})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${base_TRANSPORT_TYPELIB_LIBRARIES})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${base_TYPEKIT_LIBRARIES})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${camera_ids_LIBRARIES})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${logger_TASKLIB_LIBRARIES})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${logger_TRANSPORT_CORBA_LIBRARIES})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${logger_TRANSPORT_MQUEUE_LIBRARIES})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${logger_TRANSPORT_TYPELIB_LIBRARIES})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${logger_TYPEKIT_LIBRARIES})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${std_TRANSPORT_CORBA_LIBRARIES})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${std_TRANSPORT_MQUEUE_LIBRARIES})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${std_TRANSPORT_TYPELIB_LIBRARIES})
target_link_libraries(orogen_default_camera_simulator__CameraDriver ${std_TYPEKIT_LIBRARIES})

target_link_libraries(orogen_default_camera_simulator__CameraDriver ${OrocosCORBA_LIBRARIES})


install(TARGETS orogen_default_camera_simulator__CameraDriver
    RUNTIME DESTINATION bin)

add_dependencies(orogen_default_camera_simulator__CameraDriver
    check-uptodate)

configure_file(.orogen/orogen_default_camera_simulator__CameraDriver.pc.in
    orogen-orogen_default_camera_simulator__CameraDriver.pc @ONLY)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/orogen-orogen_default_camera_simulator__CameraDriver.pc
    DESTINATION lib/pkgconfig)

